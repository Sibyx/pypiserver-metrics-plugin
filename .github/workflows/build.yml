name: Docker Build

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  schedule:
    # Weekly rebuild to pick up latest pypiserver updates
    - cron: '0 0 * * 0'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: false
          plugins: poetry-plugin-export

      - name: Export dependencies to requirements.txt
        run: |
          poetry export -f requirements.txt --output requirements.txt --without-hashes

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Version tags (on git tags)
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # Latest tag (on master and tags)
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            # Edge tag (on master)
            type=edge,branch=master
            # Schedule tag (weekly rebuilds)
            type=schedule,pattern={{date 'YYYYMMDD'}}

      - name: Get pypiserver version
        id: pypiserver
        run: |
          PYPI_VERSION=$(grep -oP 'pypiserver==\K[0-9.]+' requirements.txt)
          echo "version=$PYPI_VERSION" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Create release notes
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          echo "Docker image published: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${GITHUB_REF#refs/tags/}" >> $GITHUB_STEP_SUMMARY
          echo "Compatible with pypiserver >= ${{ steps.pypiserver.outputs.version }}" >> $GITHUB_STEP_SUMMARY